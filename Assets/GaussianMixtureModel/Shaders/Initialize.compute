#include "Utility.hlsl"

#define GRID_SIZE 32
#define GROUP_SIZE 32

#pragma enable_d3d11_debug_symbols
#pragma multi_compile_local _ USE_GAMMA_SPACE

#pragma kernel ResetColorBins
#pragma kernel UpdateColorBins
#pragma kernel SelectColorBins
#pragma kernel UpdateIndirectArgs
#pragma kernel ResetCovariancesAndFracs

RWStructuredBuffer<uint> _ColorBins;
AppendStructuredBuffer<uint2> _AppendSelectedColorBins;

RWBuffer<uint> _IndirectArgsBufferOut;

RWStructuredBuffer<float2x3> _CovariancesOut;
RWStructuredBuffer<float> _FracsOut;

float2 _SourceSize;
Texture2D<float3> _SourceTexture;

uint _NumClusters;

[numthreads(GROUP_SIZE, 1 ,1)]
void ResetColorBins(uint3 id : SV_DispatchThreadID)
{
    _ColorBins[id.x] = 0;
}

[numthreads(GROUP_SIZE, GROUP_SIZE ,1)]
void UpdateColorBins(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)_SourceSize.x || id.y >= (uint)_SourceSize.y)
    {
        return;
    }

    float3 sample = _SourceTexture[id.xy].rgb;
#if USE_GAMMA_SPACE
    sample = LinearToGammaSpace(sample);
#endif
    // Calculate the index of the voxel the sample belongs to.
    uint3 index3d = min(sample, (0.9999).xxx) * GRID_SIZE;
    uint index = To1DIndex(index3d, GRID_SIZE);
    InterlockedAdd(_ColorBins[index], 1u);
}

[numthreads(GROUP_SIZE, 1 ,1)]
void SelectColorBins(uint3 id : SV_DispatchThreadID)
{
    // We select non-empty voxels as only those will need processing.
    uint binSize = _ColorBins[id.x];
    if (binSize > 0)
    {
        _AppendSelectedColorBins.Append(uint2(id.x, binSize));
    }
}

groupshared uint gs_IndirectArgsGroups;

// Evaluate indirect arguments for reductions. 4 values per step: threadGroupsX, Y, Z and input size.
#define INDIRECT_ARGS_THREADS 4
[numthreads(INDIRECT_ARGS_THREADS, 1 ,1)]
void UpdateIndirectArgs(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0u)
    {
        gs_IndirectArgsGroups = _IndirectArgsBufferOut[0];
    }

    // The barrier lets us proceed in a "serial" manner.
    // Each step is evaluated based on the previous one,
    // but in a separate thread.
    for (uint i = 0; i != INDIRECT_ARGS_THREADS; ++i)
    {
        GroupMemoryBarrierWithGroupSync();

        if (id.x == i)
        {
            uint count = gs_IndirectArgsGroups;
            gs_IndirectArgsGroups = ceil((float)gs_IndirectArgsGroups / GROUP_SIZE);

            _IndirectArgsBufferOut[id.x * 4] = gs_IndirectArgsGroups;
            _IndirectArgsBufferOut[id.x * 4 + 1] = 1;
            _IndirectArgsBufferOut[id.x * 4 + 2] = 1;
            _IndirectArgsBufferOut[id.x * 4 + 3] = count;
        }
    }
}

[numthreads(GROUP_SIZE, 1 ,1)]
void ResetCovariancesAndFracs(uint3 id : SV_DispatchThreadID)
{
    if (id.x > _NumClusters - 1)
    {
        return;
    }

    _FracsOut[id.x] = 1.0 / _NumClusters;
    
    static float3x3 Identity3x3 =
    {
        { 1, 0, 0 },
        { 0, 1, 0 },
        { 0, 0, 1 }
    };

    // Start with clusters that are "large" enough to encompass some samples.
    WriteMatrixSymmetric3x3(_CovariancesOut, id.x, Identity3x3 * 1e-2);
}
